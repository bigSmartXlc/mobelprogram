<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hbtcsrzzx.ssm.dao.mapper.TestCostMapper">
	<resultMap id="BaseResultMap" type="com.hbtcsrzzx.ssm.po.TestCost">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="lid" property="lid" jdbcType="INTEGER" />
		<result column="cost" property="cost" jdbcType="INTEGER" />
		<result column="state" property="state" jdbcType="INTEGER" />
	</resultMap>
	<sql id="Example_Where_Clause">
		<where>
			<foreach collection="oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem"
										open="(" close=")" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Update_By_Example_Where_Clause">
		<where>
			<foreach collection="example.oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem"
										open="(" close=")" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Base_Column_List">
		id, lid, cost, state
	</sql>
	<select id="selectByExample" resultMap="BaseResultMap"
		parameterType="com.hbtcsrzzx.ssm.po.TestCostExample">
		select
		<if test="distinct">
			distinct
		</if>
		<include refid="Base_Column_List" />
		from test_cost
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="startRow != null and pageSize != 0">
			limit #{startRow},#{pageSize}
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.Integer">
		select
		<include refid="Base_Column_List" />
		from test_cost
		where id = #{id,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from test_cost
		where id = #{id,jdbcType=INTEGER}
	</delete>
	<delete id="deleteByExample" parameterType="com.hbtcsrzzx.ssm.po.TestCostExample">
		delete from test_cost
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</delete>
	<insert id="insert" parameterType="com.hbtcsrzzx.ssm.po.TestCost">
		insert into test_cost (id, lid, cost,
		state)
		values (#{id,jdbcType=INTEGER}, #{lid,jdbcType=INTEGER},
		#{cost,jdbcType=INTEGER},
		#{state,jdbcType=INTEGER})
	</insert>
	<insert id="insertSelective" parameterType="com.hbtcsrzzx.ssm.po.TestCost">
		insert into test_cost
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="lid != null">
				lid,
			</if>
			<if test="cost != null">
				cost,
			</if>
			<if test="state != null">
				state,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=INTEGER},
			</if>
			<if test="lid != null">
				#{lid,jdbcType=INTEGER},
			</if>
			<if test="cost != null">
				#{cost,jdbcType=INTEGER},
			</if>
			<if test="state != null">
				#{state,jdbcType=INTEGER},
			</if>
		</trim>
	</insert>
	<select id="countByExample" parameterType="com.hbtcsrzzx.ssm.po.TestCostExample"
		resultType="java.lang.Integer">
		select count(*) from test_cost
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</select>
	<update id="updateByExampleSelective" parameterType="map">
		update test_cost
		<set>
			<if test="record.id != null">
				id = #{record.id,jdbcType=INTEGER},
			</if>
			<if test="record.lid != null">
				lid = #{record.lid,jdbcType=INTEGER},
			</if>
			<if test="record.cost != null">
				cost = #{record.cost,jdbcType=INTEGER},
			</if>
			<if test="record.state != null">
				state = #{record.state,jdbcType=INTEGER},
			</if>
		</set>
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByExample" parameterType="map">
		update test_cost
		set id = #{record.id,jdbcType=INTEGER},
		lid = #{record.lid,jdbcType=INTEGER},
		cost = #{record.cost,jdbcType=INTEGER},
		state = #{record.state,jdbcType=INTEGER}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByPrimaryKeySelective" parameterType="com.hbtcsrzzx.ssm.po.TestCost">
		update test_cost
		<set>
			<if test="lid != null">
				lid = #{lid,jdbcType=INTEGER},
			</if>
			<if test="cost != null">
				cost = #{cost,jdbcType=INTEGER},
			</if>
			<if test="state != null">
				state = #{state,jdbcType=INTEGER},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.hbtcsrzzx.ssm.po.TestCost">
		update test_cost
		set lid = #{lid,jdbcType=INTEGER},
		cost = #{cost,jdbcType=INTEGER},
		state = #{state,jdbcType=INTEGER}
		where id = #{id,jdbcType=INTEGER}
	</update>


</mapper>